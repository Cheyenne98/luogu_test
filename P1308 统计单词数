题目描述
一般的文本编辑器都有查找单词的功能，该功能可以快速定位特定单词在文章中的位置，有的还能统计出特定单词在文章中出现的次数。

现在，请你编程实现这一功能，具体要求是：给定一个单词，请你输出它在给定的文章中出现的次数和第一次出现的位置。注意：匹配单词时，不区分大小写，但要求完全匹配，即给定单词必须与文章中的某一独立单词在不区分大小写的情况下完全相同（参见样例1 ），如果给定单词仅是文章中某一单词的一部分则不算匹配（参见样例2 ）。

输入输出格式
输入格式：
共22行。

第11行为一个字符串，其中只含字母，表示给定单词；

第22行为一个字符串，其中只可能包含字母和空格，表示给定的文章。

输出格式：
一行，如果在文章中找到给定单词则输出两个整数，两个整数之间用一个空格隔开，分别是单词在文章中出现的次数和第一次出现的位置（即在文章中第一次出现时，单词首字母在文章中的位置，位置从00 开始）；如果单词在文章中没有出现，则直接输出一个整数-1−1。

输入输出样例
输入样例#1： 
To
to be or not to be is a question
输出样例#1： 
2 0

输入样例#2： 
to
Did the Ottoman Empire lose its power at that time
输出样例#2： 
-1
说明
数据范围

1≤ 1≤单词长度≤10≤10。

1≤ 1≤文章长度≤1,000,000≤1,000,000。

#include<bits/stdc++.h>  
using namespace std;
int main()
{
	string a,b;
	getline(cin,a);
  getline(cin,b);

	for(int i=0;i<a.length();i++)
	{
		a[i]=tolower(a[i]);
	}
	for(int i=0;i<b.length();i++)
	{
		b[i]=tolower(b[i]);
	
	}
	a=' '+a+' ';
    b=' '+b+' ';
    if(b.find(a)==string::npos)cout<<-1;
    else
    {
    	int start=b.find(a);
    	int s=b.find(a),sum=0;
    	while(s!=string::npos)
    	{
    		++sum;
    		s=b.find(a,s+1);
    		
    	}
    	cout<<sum<<' '<<start<<endl;
    }
	return 0;
} 



先说说string::npos参数： 
npos 是一个常数，用来表示不存在的位置，类型一般是std::container_type::size_type 许多容器都提供这个东西。取值由实现决定，一般是-1，这样做，就不会存在移植的问题了。 
再来说说find函数： 
find函数的返回值是整数，假如字符串存在包含关系，其返回值必定不等于npos，但如果字符串不存在包含关系，那么返回值就一定是npos。所以不难想到用if判断语句来实现！

if (a.find(b) != string::npos) {
    cout << "Yes!" << endl;
} else {
    cout << "No!" << endl;
}
--------------------- 
作者：小威威__ 
来源：CSDN 
原文：https://blog.csdn.net/linwh8/article/details/50752733 
版权声明：本文为博主原创文章，转载请附上博文链接！
